apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-coturn
  labels:
{{ include "labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}-coturn
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}-coturn
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        runAsUser: {{ .Values.securityContext.runAsUser }}
        runAsGroup: {{ .Values.securityContext.runAsGroup }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
      initContainers:
        {{- if .Values.postgresql.enabled }}
        - name: postgresql-isready
          image: "{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "database.secretName" . }}
                  key: {{ .Values.postgresql.global.postgresql.auth.secretKeys.username }}
          command:
            - "sh"
            - "-c"
            - {{ printf "until pg_isready -h %s-postgresql -U ${POSTGRES_USER} ; do sleep 2 ; done" .Release.Name }}
        {{- end }}
        - name: add-secret-values-to-config
          image: "mikefarah/yq:latest"
          imagePullPolicy: Always
          env:
            - name: USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "coturn.auth.secretName" . }}
                  key: {{ .Values.coturn.auth.secretKeys.username }}
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "coturn.auth.secretName" . }}
                  key: {{ .Values.coturn.auth.secretKeys.password }}
            {{- if or .Values.externalDatabase.enabled .Values.postgresql.enabled }}
            - name: DATABASE_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "database.secretName" . }}
                  {{- if and .Values.externalDatabase.enabled .Values.externalDatabase.secretKeys.hostname }}
                  key: {{ .Values.externalDatabase.secretKeys.username }}
                  {{ else }}
                  key: hostname
                  {{- end }}
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "database.secretName" . }}
                  {{- if and .Values.externalDatabase.enabled .Values.externalDatabase.secretKeys.username }}
                  key: {{ .Values.externalDatabase.secretKeys.username }}
                  {{ else }}
                  key: {{ .Values.postgresql.global.postgresql.auth.secretKeys.username }}
                  {{- end }}
            - name: DATABASE_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ include "database.secretName" . }}
                  {{- if and .Values.externalDatabase.enabled .Values.externalDatabase.secretKeys.password }}
                  key: {{ .Values.externalDatabase.secretKeys.password }}
                  {{ else }}
                  key: {{ .Values.postgresql.global.postgresql.auth.secretKeys.userPasswordKey }}
                  {{- end }}
            - name: DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ include "database.secretName" . }}
                  {{- if and .Values.externalDatabase.enabled .Values.externalDatabase.secretKeys.database }}
                  key: {{ .Values.externalDatabase.secretKeys.database }}
                  {{ else }}
                  key: {{ .Values.postgresql.global.postgresql.auth.secretKeys.database }}
                  {{- end }}
            {{- end }}
          command:
            - /bin/sh
            - -ec
            - |
              cp /initial/turnserver.conf /data/ && \
              yq eval -i '.user = env(USERNAME):env(PASSWORD)' /data/turnserver.conf && \
              {{- if or .Values.externalDatabase.enabled .Values.postgresql.enabled }}
              yq eval -i '.psql-db = "host=env(DATABASE_HOSTNAME) dbname=env(DATABASE) user=env(DATABASE_USER) password=env(DATABASE_PASS) connect_timeout=30' /data/turnserver.conf && \
              {{- end }}
              sed -i 's/: /=/' /data/turnserver.conf && \
              cat /extra/turnserver.conf >> /data/turnserver.conf && \
              echo "lt-cred-mech" >> /data/turnserver.conf
          volumeMounts:
            - name: {{ .Release.Name }}-initial-config
              mountPath: /initial
            - name: {{ .Release.Name }}-extra-config
              mountPath: /extra
            - name: {{ .Release.Name }}-config
              mountPath: /data
      containers:
        - name: "coturn"
          image: {{ include "coturn.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args: ["-c", "/turnserver.conf"]
          ports:
            - name: turn-udp
              containerPort: {{ .Values.coturn.ports.listening }}
              protocol: UDP
            - name: turn-tcp
              containerPort: {{ .Values.coturn.ports.listening }}
              protocol: TCP
            - name: turn-tcp-tls
              containerPort: {{ .Values.coturn.ports.tlsListening }}
              protocol: TCP
            - name: turn-udp-dtls
              containerPort: {{ .Values.coturn.ports.tlsListening }}
              protocol: UDP
          volumeMounts:
            - name: {{ .Release.Name }}-config
              mountPath: /turnserver.conf
              subPath: turnserver.conf
              readOnly: true
            - name: tls
              mountPath: /tls
              readOnly: true
            - name: var-tmp
              mountPath: /var/tmp
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: tls
          secret:
            secretName: {{ .Values.certificate.secret }}
        - name: {{ .Release.Name }}-initial-config
          configMap:
            name: {{ .Release.Name }}-initial-config
        - name: {{ .Release.Name }}-extra-config
          configMap:
            name: {{ .Release.Name }}-extra-config
        - name: {{ .Release.Name }}-config
          persistentVolumeClaim:
            {{- if .Values.persistence.existingClaim }}
            claimName: {{ .Values.persistence.existingClaim }}
            {{ else }}
            claimName: {{ .Release.Name }}-config
            {{- end }}
        - name: var-tmp
          emptyDir: {}
